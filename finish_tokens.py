#!/usr/bin/python

import argparse
import os
import barcode

###########################
# Define Token Parameters #
###########################
PAGE_WIDTH = 290 # mm
PAGE_HEIGHT = 210 # mm
TOKEN_SPACING = 2 # mm - space between tokens on the page
TOKEN_WIDTH = 55  # mm
TOKEN_HEIGHT = 25 # mm
BORDER_RADIUS = 3 # mm
BARCODE_X_OFFSET = 5 # mm
BARCODE_Y_OFFSET = 7 # mm
BARCODE_LINE_WIDTH = 0.4 # mm
BARCODE_LINE_HEIGHT = 10 # mm
HOLE_X_OFFSET = 7 # mm
HOLE_DIA = 4 # mm
TEXT_Y_OFFSET = 5 # mm
FOREGROUND_COLOUR = "#000000"  # black
BACKGROUND_COLOUR = "#ffffff"  # white
FONT_SIZE = 12

SIZE = "{0:.3f}mm"

def makeToken(tokenVal,titleStr="Parkrun Finish Token"):
    # Create an SVG document of the necessary size
    document = barcode.writer.create_svg_object(False)
    root = document.documentElement
    attributes = {
        "width": SIZE.format(TOKEN_WIDTH),
        "height": SIZE.format(TOKEN_HEIGHT),
    }
    barcode.writer._set_attributes(root, **attributes)
    root.appendChild(document.createComment("Generated by finish_tokens.py"))

    # Create a group to hold all of the token components
    groupElem = document.createElement("g")
    attributes = {"id": "token_group"}
    barcode.writer._set_attributes(groupElem, **attributes)
    group = root.appendChild(groupElem)

    # Draw the token background
    background =  document.createElement("rect")
    attributes = {
        "width": "100%",
        "height": "100%",
        "style": "fill:%s" % BACKGROUND_COLOUR
    }
    barcode.writer._set_attributes(background, **attributes)
    group.appendChild(background)

    # Draw the token border
    tokenBorder = document.createElement("rect")
    attributes = {
        "width": SIZE.format(TOKEN_WIDTH),
        "height": SIZE.format(TOKEN_HEIGHT),
        "rx": SIZE.format(BORDER_RADIUS),
        "ry": SIZE.format(BORDER_RADIUS),
        "style": f"fill:transparent; stroke:black; storke-width:3;"
    }
    barcode.writer._set_attributes(tokenBorder, **attributes)
    group.appendChild(tokenBorder)

    # Draw the token hole
    tokenHole = document.createElement("circle")
    attributes = {
        "cx": SIZE.format(TOKEN_WIDTH-HOLE_X_OFFSET),
        "cy": SIZE.format(TOKEN_HEIGHT/2.),
        "r": SIZE.format(HOLE_DIA/2.),
        "style": f"fill:transparent; stroke:black; storke-width:3;"
    }
    barcode.writer._set_attributes(tokenHole, **attributes)
    group.appendChild(tokenHole)

    # Write the title
    element = document.createElement("text")
    attributes = {
        "x": SIZE.format(TOKEN_WIDTH/2.),
        "y": SIZE.format(TEXT_Y_OFFSET),
        "style": "fill:{};font-size:{}pt;text-anchor:middle;".format(
            FOREGROUND_COLOUR,
            FONT_SIZE,
        ),
    }
    barcode.writer._set_attributes(element, **attributes)
    text_element = document.createTextNode(titleStr)
    element.appendChild(text_element)
    group.appendChild(element)

    # Draw the barcode itself
    elem = document.createElement("svg")
    attributes= { "x": SIZE.format(BARCODE_X_OFFSET),
                  "y": SIZE.format(BARCODE_Y_OFFSET)
    }
    barcode.writer._set_attributes(elem, **attributes)
    tokenCode = barcode.Code128(tokenVal)
    tokenCodeSvg = tokenCode.render(writer_options={"with_doctype":False,
                                                    "module_width":BARCODE_LINE_WIDTH,
                                                    "module_height":BARCODE_LINE_HEIGHT})
    elem.appendChild(tokenCode.writer._root)
    group.appendChild(elem)

    # Return the xml dom (not the xml text)
    return(root)
    


def makeTokensPage(tokensList):
    document = barcode.writer.create_svg_object(True)
    root = document.documentElement
    attributes = {
        "width": SIZE.format(PAGE_WIDTH),
        "height": SIZE.format(PAGE_HEIGHT),
    }
    barcode.writer._set_attributes(root, **attributes)
    root.appendChild(document.createComment("Generated by finish_tokens.py"))
    xpos = TOKEN_SPACING
    ypos = TOKEN_SPACING
    for tokenVal in tokensList:
        print("making token: %s" % tokenVal)
        #tokenCode = barcode.Code128(tokenVal, writer=ParkrunTokenWriter())
        #tokenSvg = tokenCode.render(writer_options={"module_width":0.4,
        #                                            "module_height":10.})
        #print(tokenSvg)

        elem = document.createElement("svg")
        attributes= { "x": SIZE.format(xpos),
                      "y": SIZE.format(ypos)
        }
        barcode.writer._set_attributes(elem, **attributes)
        #node = document.createTextNode(tokenSvg.decode("utf-8"))
        #elem.appendChild(node)
        elem.appendChild(makeToken(tokenVal))

        root.appendChild(elem)
        xpos = xpos + TOKEN_WIDTH + TOKEN_SPACING
        if (xpos>PAGE_WIDTH - TOKEN_WIDTH - TOKEN_SPACING):
            xpos = TOKEN_SPACING
            ypos = ypos + TOKEN_HEIGHT + TOKEN_SPACING
        if (ypos>PAGE_HEIGHT - TOKEN_HEIGHT - TOKEN_SPACING):
            print("end of page")
            break

    svgTxt = document.toprettyxml(
        indent=4 * " ", newl=os.linesep, encoding="UTF-8"
    )
    #print(svgTxt)
    return(svgTxt)


def main():
    print("finish_tokens.main()")

    parser = argparse.ArgumentParser()
    parser.add_argument("tokenListInput", nargs="+",
                        help="list of token numbers and ranges to generate (e.g 3 4 10-15 21-23 30)")
    parser.add_argument("-f", default="tokenPage.svg",
                        help="output filename (Default tokenPage.svg)")
    args = vars(parser.parse_args())
    print(args)

    tokenLst = []
    for tokId in args['tokenListInput']:
        print(tokId)
        if tokId.isdigit():
            tokenLst.append("P%04d" % int(tokId))
        else:
            if (len(tokId.split('-')) == 2):
                startStr, endStr = tokId.split('-')
                for n in range(int(startStr), int(endStr)+1):
                    tokenLst.append("P%04d" % n)
                
    print(tokenLst)

    svgTxt = makeTokensPage(tokenLst)

    outFile = open(args['f'], "w")
    outFile.write(svgTxt.decode("utf-8"))
    outFile.close()

    
if (__name__ == "__main__"):
    main()
