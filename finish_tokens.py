#!/usr/bin/python

import argparse
import os
import io
import tempfile
import zipfile
import xml.dom
import barcode

###########################
# Define Token Parameters #
###########################
PAGE_WIDTH = 290  # mm
PAGE_HEIGHT = 210  # mm
TOKEN_SPACING = 2  # mm - space between tokens on the page
TOKEN_WIDTH = 55  # mm
TOKEN_HEIGHT = 25  # mm
BORDER_RADIUS = 3  # mm
BARCODE_X_OFFSET = 5  # mm
BARCODE_Y_OFFSET = 6  # mm
BARCODE_LINE_WIDTH = 0.4  # mm
BARCODE_LINE_HEIGHT = 10  # mm
HOLE_X_OFFSET = 7  # mm
HOLE_DIA = 4  # mm
TEXT_Y_OFFSET = 5  # mm
FOREGROUND_COLOUR = "#000000"  # black
BACKGROUND_COLOUR = "#ffffff"  # white
FONT_SIZE = 12

SIZE = "{0:.3f}mm"


def _set_attributes(element, **attributes):
    for key, value in attributes.items():
        element.setAttribute(key, value)


def create_svg_object(with_doctype=False):
    imp = xml.dom.getDOMImplementation()
    doctype = imp.createDocumentType(
        "svg",
        "-//W3C//DTD SVG 1.1//EN",
        "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd",
    )
    document = imp.createDocument(None, "svg", doctype if with_doctype else None)
    _set_attributes(
        document.documentElement, version="1.1", xmlns="http://www.w3.org/2000/svg"
    )
    return document



def makeToken(tokenVal,titleStr="Parkrun Finish Token"):
    # Create an SVG document of the necessary size
    document = create_svg_object(False)
    root = document.documentElement
    attributes = {
        "width": SIZE.format(TOKEN_WIDTH),
        "height": SIZE.format(TOKEN_HEIGHT),
    }
    barcode.writer._set_attributes(root, **attributes)
    root.appendChild(document.createComment("Generated by finish_tokens.py"))

    # Create a group to hold all of the token components
    groupElem = document.createElement("g")
    attributes = {"id": "token_group"}
    barcode.writer._set_attributes(groupElem, **attributes)
    group = root.appendChild(groupElem)

    # Draw the token background
    background =  document.createElement("rect")
    attributes = {
        "width": "100%",
        "height": "100%",
        "style": "fill:%s" % BACKGROUND_COLOUR
    }
    barcode.writer._set_attributes(background, **attributes)
    group.appendChild(background)

    # Draw the token border
    tokenBorder = document.createElement("rect")
    attributes = {
        "width": SIZE.format(TOKEN_WIDTH),
        "height": SIZE.format(TOKEN_HEIGHT),
        "rx": SIZE.format(BORDER_RADIUS),
        "ry": SIZE.format(BORDER_RADIUS),
        "style": f"fill:transparent; stroke:black; storke-width:3;"
    }
    barcode.writer._set_attributes(tokenBorder, **attributes)
    group.appendChild(tokenBorder)

    # Draw the token hole
    tokenHole = document.createElement("circle")
    attributes = {
        "cx": SIZE.format(TOKEN_WIDTH-HOLE_X_OFFSET),
        "cy": SIZE.format(TOKEN_HEIGHT/2.),
        "r": SIZE.format(HOLE_DIA/2.),
        "style": f"fill:transparent; stroke:black; storke-width:3;"
    }
    barcode.writer._set_attributes(tokenHole, **attributes)
    group.appendChild(tokenHole)

    # Write the title
    element = document.createElement("text")
    attributes = {
        "x": SIZE.format(TOKEN_WIDTH/2.),
        "y": SIZE.format(TEXT_Y_OFFSET),
        "style": "fill:{};font-size:{}pt;text-anchor:middle;".format(
            FOREGROUND_COLOUR,
            FONT_SIZE,
        ),
    }
    barcode.writer._set_attributes(element, **attributes)
    text_element = document.createTextNode(titleStr)
    element.appendChild(text_element)
    group.appendChild(element)

    # Draw the barcode itself
    elem = document.createElement("svg")
    attributes= { "x": SIZE.format(BARCODE_X_OFFSET),
                  "y": SIZE.format(BARCODE_Y_OFFSET)
    }
    barcode.writer._set_attributes(elem, **attributes)
    tokenCode = barcode.Code128(tokenVal)
    tokenCodeSvg = tokenCode.render(writer_options={"with_doctype":False,
                                                    "module_width":BARCODE_LINE_WIDTH,
                                                    "module_height":BARCODE_LINE_HEIGHT})
    elem.appendChild(tokenCode.writer._root)
    group.appendChild(elem)

    # Return the xml dom (not the xml text)
    return(root)
    


def makeTokensPage(tokensList, titleStr="tokenPage"):
    document = create_svg_object(True)
    root = document.documentElement
    attributes = {
        "width": SIZE.format(PAGE_WIDTH),
        "height": SIZE.format(PAGE_HEIGHT),
    }
    barcode.writer._set_attributes(root, **attributes)
    root.appendChild(document.createComment("Generated by finish_tokens.py"))

    xpos = TOKEN_SPACING
    ypos = TOKEN_SPACING
    for tokenVal in tokensList:
        print("making token: %s" % tokenVal)

        elem = document.createElement("svg")
        attributes= { "x": SIZE.format(xpos),
                      "y": SIZE.format(ypos)
        }
        barcode.writer._set_attributes(elem, **attributes)
        elem.appendChild(makeToken(tokenVal, titleStr=titleStr))
        root.appendChild(elem)
        
        xpos = xpos + TOKEN_WIDTH + TOKEN_SPACING
        if (xpos>PAGE_WIDTH - TOKEN_WIDTH - TOKEN_SPACING):
            xpos = TOKEN_SPACING
            ypos = ypos + TOKEN_HEIGHT + TOKEN_SPACING
        if (ypos>PAGE_HEIGHT - TOKEN_HEIGHT - TOKEN_SPACING):
            print("end of page")
            break


    svgTxt = document.toprettyxml(
        indent=4 * " ", newl=os.linesep, encoding="UTF-8"
    )
    #print(svgTxt)
    return(svgTxt)

def makeTokenList(tokenListStr):
    tokenLst = []
    # replace commas with spaces so we can use either space or
    # comma separated lists.
    tokenListStrSpaceSep = tokenListStr.replace(',',' ')
    for tokId in tokenListStrSpaceSep.split(' '):
        print(tokId)
        if tokId.isdigit():
            tokenLst.append("P%04d" % int(tokId))
        else:
            if (len(tokId.split('-')) == 2):
                startStr, endStr = tokId.split('-')
                for n in range(int(startStr), int(endStr)+1):
                    tokenLst.append("P%04d" % n)
    return(tokenLst)

def getTokensPerPage():
    nrows = int((PAGE_HEIGHT - TOKEN_SPACING) /
                (TOKEN_HEIGHT + TOKEN_SPACING))
    ncols = int((PAGE_WIDTH - TOKEN_SPACING) /
                (TOKEN_WIDTH + TOKEN_SPACING))
    tokensPerPage = nrows * ncols
    print("getTokensPerPage(): nrows=%d, ncols=%d, tokens per page = %d" %
          (nrows, ncols, tokensPerPage))
    return(tokensPerPage)

def getTokensZipFile(tokenLst, titleStr):
    ''' based on https://www.neilgrogan.com/py-bin-zip/
    returns a BytesIO object that can be processed as a file witout
    saving the file to disk..
    '''
    svgFname = "tokens"
    #tmpDir = tempfile.mkdtemp()
    tokensPerPage = getTokensPerPage()

    startToken = 0
    pageNo = 1
    outFilesLst = []  # List of tuples (file name, contents)
    while(startToken < len(tokenLst)):
          pageTokens = tokenLst[startToken:startToken+tokensPerPage]
          startToken += tokensPerPage
          svgTxt = makeTokensPage(pageTokens, titleStr = titleStr)
          outFileName = "%s_%d.svg" % (svgFname, pageNo)
          outFilesLst.append((outFileName,svgTxt))
          pageNo += 1
          startToken = (pageNo-1)*tokensPerPage
    mem_zip = io.BytesIO()
    #print(outFilesLst)
    #(fh, fname) = tempfile.mkstemp(suffix=".zip")
    #print("temp fname = ",fname)
    with zipfile.ZipFile(mem_zip, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
        for f in outFilesLst:
            zf.writestr(f[0],f[1])
    #print(mem_zip)
    # Return to start of zip file
    mem_zip.seek(0)
    return(mem_zip)


def main():
    print("finish_tokens.main()")

    parser = argparse.ArgumentParser()
    parser.add_argument("tokenListInput", nargs="+",
                        help="list of token numbers and ranges to generate (e.g 3 4 10-15 21-23 30)")
    parser.add_argument("-f", "--outFile", default="tokenPage",
                        help="output filename (without extension) Default 'tokenPage'")
    parser.add_argument("-t", "--title", default="Parkrun Finish Token",
                        help="title to print on the top of each token")
    args = vars(parser.parse_args())
    print(args)

    tokenLst = makeTokenList(args['tokenListInput'])
    #print(tokenLst)

    tokensPerPage = getTokensPerPage()


    startToken = 0
    pageNo = 1
    while(startToken < len(tokenLst)):
          pageTokens = tokenLst[startToken:startToken+tokensPerPage]
          startToken += tokensPerPage

          svgTxt = makeTokensPage(pageTokens, titleStr = args['title'])

          outFile = open("%s_%d.svg" % (args['outFile'],pageNo), "w")
          outFile.write(svgTxt.decode("utf-8"))
          outFile.close()
          pageNo += 1
          startToken = (pageNo-1)*tokensPerPage
    
if (__name__ == "__main__"):
    main()
